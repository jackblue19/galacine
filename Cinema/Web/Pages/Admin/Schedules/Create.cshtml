@page
@model Web.Pages.Admin.Schedules.CreateModel
@using Data.Entities
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- CSS -->
    <link rel="stylesheet" href="~/AdminTemplate_files/bootstrap.min.css">
    <link rel="stylesheet" href="~/AdminTemplate_files/slimselect.css">
    <link rel="stylesheet" href="~/AdminTemplate_files/admin.css">

    <!-- Favicons -->
    <link rel="icon" type="image/png" href="https://flixgo.volkovdesign.com/admin/icon/favicon-32x32.png" sizes="32x32">
    <link rel="apple-touch-icon" href="https://flixgo.volkovdesign.com/admin/icon/favicon-32x32.png">

    <meta name="description" content="">
    <meta name="keywords" content="">
    <meta name="author" content="Dmitry Volkov">
    <title>FlixGo – Online Movies, TV Shows & Cinema HTML Template</title>

    <style id="smooth-scrollbar-style">
        [data-scrollbar] {
            display: block;
            position: relative;
        }

        .scroll-content {
            -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
        }

        .scrollbar-track {
            position: absolute;
            opacity: 0;
            z-index: 1;
            background: rgba(222, 222, 222, .75);
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-transition: opacity 0.5s 0.5s ease-out;
            transition: opacity 0.5s 0.5s ease-out;
        }

            .scrollbar-track.show,
            .scrollbar-track:hover {
                opacity: 1;
                -webkit-transition-delay: 0s;
                transition-delay: 0s;
            }

        .scrollbar-track-x {
            bottom: 0;
            left: 0;
            width: 100%;
            height: 8px;
        }

        .scrollbar-track-y {
            top: 0;
            right: 0;
            width: 8px;
            height: 100%;
        }

        .scrollbar-thumb {
            position: absolute;
            top: 0;
            left: 0;
            width: 8px;
            height: 8px;
            background: rgba(0, 0, 0, .5);
            border-radius: 4px;
        }

        /* Căn giữa form */
        .sign__wrap {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100%;
        }

        .sign__form {
            max-width: 500px;
            width: 100%;
            margin: 0 auto;
            padding: 20px;
        }

        .main__title-link {
            display: inline-flex;
            align-items: center;
            padding: 8px 16px;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 4px;
            color: #333;
            text-decoration: none;
            transition: background-color 0.3s, color 0.3s;
            min-width: 200px; /* Tăng chiều rộng tối thiểu để chứa toàn bộ chữ */
            white-space: nowrap; /* Ngăn xuống dòng */
        }

            .main__title-link:hover {
                background-color: #e9ecef;
                color: #007bff;
            }

            .main__title-link svg {
                margin-right: 8px;
                width: 16px;
                height: 16px;
                fill: currentColor;
                flex-shrink: 0; /* Ngăn SVG co lại */
            }

            .main__title-link span {
                flex: 1;
            }
        /* Hiển thị chữ "Thêm" trên nút submit */
        .sign__btn {
            position: relative;
            padding: 10px 20px;
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            color: #fff;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s;
            text-align: center;
        }

            .sign__btn:disabled {
                background-color: #6c757d;
                cursor: not-allowed;
            }

            .sign__btn:hover:not(:disabled) {
                background-color: #0056b3;
            }

            .sign__btn span {
                display: inline;
            }

        /* Định dạng checkbox */
        .sign__checkbox-wrapper {
            display: flex;
            align-items: center;
            margin-top: 5px;
        }

        .sign__checkbox {
            width: 18px;
            height: 18px;
            margin-right: 10px;
            cursor: pointer;
            accent-color: #007bff; /* Màu khi checkbox được chọn */
            transition: transform 0.2s;
        }

            .sign__checkbox:hover {
                transform: scale(1.1); /* Phóng to nhẹ khi hover */
            }

        .sign__checkbox-label {
            font-size: 14px;
            color: #333;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <!-- header -->
    <header class="header">
        <div class="header__content">
            <a href="#" class="header__logo">
                <img src="~/AdminTemplate_files/logo.svg" alt="">
            </a>
            <button class="header__btn" type="button">
                <span></span>
                <span></span>
                <span></span>
            </button>
        </div>
    </header>
    <!-- end header -->
    <!-- sidebar -->
    <div class="sidebar">
        <a href="#" class="sidebar__logo">
            <img src="~/AdminTemplate_files/logo.svg" alt="">
        </a>
        <div class="sidebar__user">
            <div class="sidebar__user-img">
                <img src="~/AdminTemplate_files/user.svg" alt="">
            </div>
            <div class="sidebar__user-title">
                <span>Admin</span>
                <p>John Doe</p>
            </div>
            <button class="sidebar__user-btn" type="button">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4,12a1,1,0,0,0,1,1h7.59l-2.3,2.29a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l4-4a1,1,0,0,0,.21-.33,1,1,0,0,0,0-.76,1,1,0,0,0-.21-.33l-4-4a1,1,0,1,0-1.42,1.42L12.59,11H5A1,1,0,0,0,4,12ZM17,2H7A3,3,0,0,0,4,5V8A1,1,0,0,0,6,8V5A1,1,0,0,1,7,4H17a1,1,0,0,1,1,1V19a1,1,0,0,1-1,1H7a1,1,0,0,1-1-1V16a1,1,0,0,0-2,0v3a3,3,0,0,0,3,3H17a3,3,0,0,0,3-3V5A3,3,0,0,0,17,2Z"></path></svg>
            </button>
        </div>
        @await Html.PartialAsync("_SideBarAdmin")
        <div class="sidebar__copyright">© FlixGo, 2018—2023. <br>Create by <a href="https://themeforest.net/user/dmitryvolkov/portfolio" target="_blank" rel="noopener">Dmitry Volkov</a>.</div>
    </div>
    <!-- end sidebar -->
    <!-- main content -->
    <main class="main">
        <div class="container-fluid">
            <div class="row">
                <!-- main title -->
                <div class="col-12">
                    <div class="main__title">
                        <h2>Thêm lịch chiếu</h2>
                        <div class="main__title-wrap">
                            <a asp-page="./Index" class="main__title-link">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M17,11H9.41l3.3-3.29a1,1,0,1,0-1.42-1.42l-5,5a1,1,0,0,0-.21.33,1,1,0,0,0,0,.76,1,1,0,0,0,.21.33l5,5a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42L9.41,13H17a1,1,0,0,0,0-2Z"></path>
                                </svg>
                                <span>Back to schedules</span>
                            </a>
                        </div>
                    </div>
                </div>
                <!-- end main title -->
                <!-- form -->
                <div class="col-12">
                    <div class="sign__wrap">
                        <div class="sign__form">
                            @if (!ViewData.ModelState.IsValid)
                            {
                                <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>
                            }
                            <form method="post">
                                <div class="sign__group">
                                    <label asp-for="Schedule.MovieId" class="sign__label">Phim</label>
                                    <select asp-for="Schedule.MovieId" class="sign__select" asp-items="@(new SelectList(Model.Movies, "MovieId", "MovieName"))" onchange="updateFormState()">
                                        <option value="">-- Choose movie --</option>
                                    </select>
                                    <span asp-validation-for="Schedule.MovieId" class="text-danger"></span>
                                </div>

                                <div class="sign__group">
                                    <label asp-for="Schedule.RoomId" class="sign__label">Phòng</label>
                                    <select asp-for="Schedule.RoomId" class="sign__select" asp-items="@(new SelectList(Model.Rooms, "RoomId", "RoomName"))" onchange="updateFormState()">
                                        <option value="">-- Choose room  --</option>
                                    </select>
                                    <span asp-validation-for="Schedule.RoomId" class="text-danger"></span>
                                </div>

                                <div class="sign__group" id="startDatetimeGroup" style="display: none;">
                                    <label asp-for="Schedule.StartDatetime" class="sign__label"></label>
                                    <input asp-for="Schedule.StartDatetime" class="sign__input" type="datetime-local" />
                                    <span asp-validation-for="Schedule.StartDatetime" class="text-danger"></span>
                                </div>

                                <div class="sign__group" id="endDatetimeGroup" style="display: none;">
                                    <label asp-for="Schedule.EndDatetime" class="sign__label"></label>
                                    <input asp-for="Schedule.EndDatetime" class="sign__input" type="datetime-local" />
                                    <span asp-validation-for="Schedule.EndDatetime" class="text-danger"></span>
                                </div>

                                <div class="sign__group">
                                    <label asp-for="Is3DSelection" class="sign__label">3D</label>
                                    <select asp-for="Is3DSelection" class="sign__select">
                                        <option value="">Unknown</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </select>
                                    <span asp-validation-for="Is3DSelection" class="text-danger"></span>
                                </div>

                                <div class="sign__group">
                                    <label asp-for="IsSubtitleSelection" class="sign__label">Caption</label>
                                    <select asp-for="IsSubtitleSelection" class="sign__select">
                                        <option value="">Unknown</option>
                                        <option value="true">Yes</option>
                                        <option value="false">No</option>
                                    </select>
                                    <span asp-validation-for="IsSubtitleSelection" class="text-danger"></span>
                                </div>

                                <button type="submit" class="sign__btn" id="submitButton" disabled><span>Add new schedule</span></button>
                            </form>
                        </div>
                    </div>
                </div>
                <!-- end form -->
            </div>
        </div>
    </main>
    <!-- end main content -->
    <!-- JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/AdminTemplate_files/bootstrap.bundle.min.js"></script>
    <script src="~/AdminTemplate_files/smooth-scrollbar.js"></script>
    <script src="~/AdminTemplate_files/slimselect.min.js"></script>
    <script src="~/AdminTemplate_files/admin.js"></script>
    <script>
        let occupiedRanges = []; // Lưu các khoảng thời gian đã có lịch chiếu

        function updateFormState() {
            const movieId = document.querySelector('select[name="Schedule.MovieId"]').value;
            const roomId = document.querySelector('select[name="Schedule.RoomId"]').value;
            const startInput = document.querySelector('input[name="Schedule.StartDatetime"]');
            const endInput = document.querySelector('input[name="Schedule.EndDatetime"]');
            const startGroup = document.querySelector('#startDatetimeGroup');
            const endGroup = document.querySelector('#endDatetimeGroup');
            const submitButton = document.querySelector('#submitButton');

            // Chỉ hiện các trường thời gian khi đã chọn cả MovieId và RoomId
            if (movieId && roomId) {
                startGroup.style.display = 'block';
                endGroup.style.display = 'block';
                submitButton.disabled = false;

                // Thiết lập thời gian tối thiểu là hiện tại
                const now = new Date();
                const minDateTime = now.toISOString().slice(0, 16); // Định dạng yyyy-MM-ddThh:mm
                startInput.setAttribute('min', minDateTime);
                endInput.setAttribute('min', minDateTime);

                // Lấy danh sách lịch chiếu hiện có
                fetchSchedules(movieId, roomId, startInput, endInput);
            } else {
                startGroup.style.display = 'none';
                endGroup.style.display = 'none';
                submitButton.disabled = true;
                startInput.value = '';
                endInput.value = '';
                occupiedRanges = [];
            }
        }

        function fetchSchedules(movieId, roomId, startInput, endInput) {
            $.ajax({
                url: `/api/Schedules/byMovieAndRoom?movieId=${movieId}&roomId=${roomId}`,
                method: 'GET',
                success: function (schedules) {
                    occupiedRanges = schedules.map(schedule => ({
                        start: new Date(schedule.startDatetime),
                        end: new Date(schedule.endDatetime)
                    }));

                    // Thêm sự kiện kiểm tra thời gian khi người dùng thay đổi giá trị
                    startInput.addEventListener('change', checkOverlap);
                    endInput.addEventListener('change', checkOverlap);
                },
                error: function () {
                    console.error('Lỗi khi lấy danh sách lịch chiếu.');
                }
            });
        }

        function checkOverlap() {
            const startInput = document.querySelector('input[name="Schedule.StartDatetime"]');
            const endInput = document.querySelector('input[name="Schedule.EndDatetime"]');
            const selectedStart = new Date(startInput.value);
            const selectedEnd = new Date(endInput.value);

            // Kiểm tra thời gian nhỏ hơn hiện tại
            const now = new Date();
            if (selectedStart < now) {
                alert('Thời gian bắt đầu không được nhỏ hơn thời gian hiện tại.');
                startInput.value = '';
                return;
            }
            if (selectedEnd < now) {
                alert('Thời gian kết thúc không được nhỏ hơn thời gian hiện tại.');
                endInput.value = '';
                return;
            }

            // Kiểm tra xem thời gian chọn có nằm trong khoảng thời gian đã có lịch chiếu không
            for (const range of occupiedRanges) {
                const rangeStart = range.start;
                const rangeEnd = range.end;

                // Kiểm tra thời gian bắt đầu
                if (startInput.value && selectedStart >= rangeStart && selectedStart <= rangeEnd) {
                    alert(`Thời gian bắt đầu nằm trong khoảng lịch chiếu đã có (${formatDate(rangeStart)} - ${formatDate(rangeEnd)}). Vui lòng chọn thời gian khác.`);
                    startInput.value = '';
                    return;
                }

                // Kiểm tra thời gian kết thúc
                if (endInput.value && selectedEnd >= rangeStart && selectedEnd <= rangeEnd) {
                    alert(`Thời gian kết thúc nằm trong khoảng lịch chiếu đã có (${formatDate(rangeStart)} - ${formatDate(rangeEnd)}). Vui lòng chọn thời gian khác.`);
                    endInput.value = '';
                    return;
                }

                // Kiểm tra nếu khoảng thời gian chọn bao phủ một khoảng thời gian đã có lịch
                if (startInput.value && endInput.value && selectedStart <= rangeStart && selectedEnd >= rangeEnd) {
                    alert(`Khoảng thời gian bạn chọn bao phủ lịch chiếu đã có (${formatDate(rangeStart)} - ${formatDate(rangeEnd)}). Vui lòng chọn thời gian khác.`);
                    startInput.value = '';
                    endInput.value = '';
                    return;
                }
            }
        }

        function formatDate(date) {
            return date.toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' });
        }

        // Gọi hàm updateFormState khi trang được tải để đảm bảo trạng thái ban đầu
        document.addEventListener('DOMContentLoaded', updateFormState);
    </script>
</body>
</html>